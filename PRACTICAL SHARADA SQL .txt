
 DATABASE
----------------------------------
(1) create database <db-name>
(2) create database if not exists <db-name>
(3) drop database <db-name> 
(4) drop database if exists <db-name>
(5) show databases
(6) use <db-name>
() 




TABLE RELATED QUARIES
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
(1) show tables

(2) CREATE:= 

 a.  create table <table-name> (<column1-name> datatype constraint);
 b.  create table if not exists emp (<col1-name> datatype constraint);


(3) INSERT :=

  a. insert into <table-name> (col1,col2) values (col1-val1,col2-val2),(col2-val2,col2-val2);



(4) UPDATES:=

Note:- on safe mode: SET SQL_SAFE_UPDATES=0;
  a. update <table-name> set col1=val1,col2=val2 where condition;  / update temp set name='sahil' , email='sahil@gmail.com' where e_id=1;


(5) DELETE:=

    a. delete from <table-name> where condition; 
    b. delete from <table-name> where e_id > 7;

 (6) Drop :=
      a. DROP TABLE <table-name>;
      b. DROP TABLE IF EXISTS <table-name>;


(7) ALTER:=

   a. ADD COLUMN:
   ->  alter table <table-name> add column <column-name> datatype constraint;

   b. DROP COLUMN:
    -> alter table <table-name> drop column<column-name> ;

   c. RENAME COLUMN:
     ->  ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;
     ->  ALTER TABLE <table-name> change column <old-name> <new-name> datatype <new-constraint>

   d. MODIFY:
    ->  ALTER TABLE <table-name> modify <col-name> <new-datatype> <new-constraint>

    f. RENAME TABLE:
    ->  alter table <table-name> rename to <new-table-name>


 (8) TRUNCATE:=
    a. truncate table <table-name> 
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------








SELECT & VIEW ALL COLUMNS:=
-------------------------------------------------------------------------------------------------------------------------
(1) select * from <table-name>
(2) select col1,col2 from <table-name>


WHERE CLUSE:=
---------------------------------------------------------------------------------------------------------------------------
(1) select col1,col2 from <table-name> where conditions;
(2)


WHERE CLUSE WITH LOGICAL OPERATORS:=
----------------------------------------------------------------------------------------------------------------------------
AND:=
(1) select * from <table-name> where marks> 80 and city = 'mumbai';

OR:=
(1) select * from <table-name> where marks > 80 and city ='mumbai';

BETWEEN:=
(1) select *  from <table-name> where marks between 80 and 90;

IN:=
(1) select * from <table-name> where city in ("delhi","mumbai");

NOT IN :=
(1) select * from <table-name> where city not in ("delhi","mumbai");

---------------------------------------------------------------------------------------------------------------------------------
LIMIR CLUSE:=
(1) select * from <table-name> limit = 3;
(2) select name,marks from <table-name> limit = 3;


----------------------------------------------------------------------------------------------------------------------------------
ORDER BY CLUSE:=
(1) select * from <table-name> order by city asc;
(2) select name,marks from <table-name> order by city asc;
(3) select * from <table-name> order by city desc;
(4) select name,marks from <table-name> order by rollno desc;
(5) 






---------------------------------------------------------------------------------------------------------------------------------
AGGREGATE FUNCTIONS:=

COUNT():
(1) select max(marks) from student;

MIN():
(1) select min(marks) from student;

COUNT():
(1)  select count(name/rollno/marks/city...) from student;

SUM():
(1) select sum(rollno) from student;

AVG():
(1) select avg(rollno) from student;










----------------------------------------------------------------------------------------------------------------------------------------
GENERAL ORDER / GOLDEN RULE:=
(1) select
(2) from
(3) where
(4) group by
(5) having
(6) order by <col-name> asc
(7) limit









----------------------------------------------------------------------------------------------------------------------------------------
GROUP BY CLUSE:=

(1) select city , count(name) from student group by city;






--------------------------------------------------------------------------------------------------------------------------------------------
HAVING CLUSE:=

(1) select city , count(name) from student group by city having max(marks)>90;






--------------------------------------------------------------------------------------------------------------------------------------------
JOINS IN SQL := 

THERE ARE MANY TYPES OF JOINS IN SQL LIKE,
(1) Inner join
(2) Left join
(3) Right Join
(4) Full join / Outer Join


(1) Inner Join:-
select <column-name> from <table1-name> inner join <table2-name> on table1.column = table2.column;
                                      OR

select * from <table1-name> as st inner join <table2-name> as t on table1.column = table2.column;


(2) Left Join:-

 select <column-name> from <table1-name> left join <table2-name> on table1.column = table2.column;

                                            OR
select * from <table1-name> left join <table2-name> on table1.column = table2.column;


(3) Right Join:-

select <column-name> from <table1-name> right join <table2-name> on table1.column = table2.column;

                                           OR 
select * from <table1-name> right join <table2-name> on table1.column = table2.column;


(4) Full join /Outer join:-

select * from <table1-name> left Join <table2-name> on table1.column=table2.column

                                        union 

select * from <table1-name> right join <table2-name> on table1.column = table2.column;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                       SQL SUB QUEREIS:=


syntx:

select column(s) from <table-name> where <column-name> operator <sub-query>;


PRACTICE QUEZ:
(a) get name of all students who scored more than class average?
(b) find the name of all students with even roll numbers?
(c) find the max marks from the students of delhi?




---------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                               VIRTUAL TABLE CONCEPT


(1)  create view <view-table-name> as select name,rollno from student;

(2) select * from <view-table-name>


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                   STORED PROCEDURE

**STORED PROCEDURE**

// create a table having some data
CREATE TABLE employee (
    empId INT PRIMARY KEY,
    empFirstName VARCHAR(50),
    empLastName VARCHAR(50),
    empSalary DECIMAL(10, 2)
);

// fill data into table
INSERT INTO employee (empId, empFirstName, empLastName, empSalary) VALUES
(1, 'John',     'Doe',      50000.00),
(2, 'Alice',    'Smith',    60000.50),
(3, 'Robert',   'Brown',    55000.75),
(4, 'Emily',    'Davis',    62000.00),
(5, 'Michael',  'Wilson',   58000.25),
(6, 'Sophia',   'Taylor',   53000.00),
(7, 'David',    'Anderson', 61000.80);

(1) CREATE  PROCEDURE WITHOUT ANY PARAMETERS:

DELIMITER $$

CREATE PROCEDURE EMPSP()
BEGIN
   SELECT empFirstName, empLastName, empSalary FROM employee;
END $$

DELIMITER ;

// calling stored procedure.
CALL EMPSP();


(2) CREATE  PROCEDURE WITH PARAMETERS:













--------------------------------------------------------------- EXTRA --------------------------------------------------------------------------------------------

(1)  ARITHMETIC OPEARATOR USAGE :
-- Add 5 bonus marks to all students
SELECT name, marks, marks + 5 AS bonus_marks FROM student;

-- Subtract 10 marks to check hypothetical deduction
SELECT name, marks, marks - 10 AS after_deduction FROM student;

-- Multiply marks by 2 (e.g., for double-weightage)
SELECT name, marks, marks * 2 AS double_marks FROM student;

-- Divide marks by 2
SELECT name, marks, marks / 2 AS half_marks FROM student;

-- Modulo operation to check even/odd marks
SELECT name, marks, marks % 2 AS is_odd FROM student;

(2) COMPARISION OPERATORS :
-- Students who scored exactly 85
SELECT * FROM student WHERE marks = 85;

-- Students who did not score 85
SELECT * FROM student WHERE marks != 85;

-- Students with marks greater than 80
SELECT * FROM student WHERE marks > 80;

-- Marks less than or equal to 50
SELECT * FROM student WHERE marks <= 50;

-- Students with grade 'A'
SELECT * FROM student WHERE grade = 'A';

(3) LOGICAL OPERATORS :
-- Students from Delhi who got more than 80
SELECT * FROM student WHERE city = 'Delhi' AND marks > 80;

-- Students who are either from Mumbai OR scored below 50
SELECT * FROM student WHERE city = 'Mumbai' OR marks < 50;

-- Students from specific cities
SELECT * FROM student WHERE city IN ('Delhi', 'Pune');

-- Students NOT from Delhi
SELECT * FROM student WHERE city NOT IN ('Delhi');

-- Marks between 80 and 90 (inclusive)
SELECT * FROM student WHERE marks BETWEEN 80 AND 90;

-- Names starting with 'a' (case-sensitive)
SELECT * FROM student WHERE name LIKE 'a%';

-- Names ending with 'h'
SELECT * FROM student WHERE name LIKE '%h';

-- Use of ANY (students who have marks greater than any of these)
SELECT * FROM student WHERE marks > ANY (SELECT marks FROM student WHERE grade = 'F');

-- Use of ALL (students whose marks are greater than all students with grade 'F')
SELECT * FROM student WHERE marks > ALL (SELECT marks FROM student WHERE grade = 'F');























