(1) Basics of SQL :
--------------------

Q1. What is SQL?
 - SQL stands for Structured Query Language.
 - It is like a language to talk with databases.
 - Just like we use English or Hindi to communicate with people, we use SQL to communicate with databases – to ask for data, add new data, change data, or         delete data.  

Q2. Difference between SQL and MySQL?
SQL (Structured Query Language):
 - SQL is just a language used to talk with databases.
 - It provides commands like SELECT, INSERT, UPDATE, DELETE.
 - Think of it like English grammar – rules you use to form sentences.
MySQL:
 - MySQL is a database software (RDBMS) that understands SQL language.
 - It stores data in tables and lets you use SQL to manage that data.
 - Think of it like a library system where you keep books (data) and ask queries using SQL.

Q3. Can you name the different categories of SQL statements?
SQL commands are categorized into 5 types: DDL, DML, DQL, DCL, TCL.
1. DDL – Data Definition Language : 
Purpose: DDL me wo commands ati hai jo kewal or kewal table or database ke structure ki bat karti hai , record ki bat nhi krti hai / Define or modify database structure.
Commands: CREATE, ALTER, DROP, TRUNCATE, RENAME
2. DML – Data Manipulation Language
Purpose: Work with the data/record inside tables.
Commands: INSERT, UPDATE, DELETE, MERGE
3. DQL – Data Query Language 
Purpose: Retrieve data from database.
Command: SELECT
4. DCL – Data Control Language
Purpose: Control access and permissions.
Commands: GRANT:- jaise insert k liye prevelage dena hai ya nhi, REVOKE: agr kisi moment pe un previlege ko wapis/rollback krna hai to revoke ka use krte hai
5. TCL – Transaction Control Language
Purpose: Manage transactions (group of operations).
Commands: COMMIT, ROLLBACK, SAVEPOINT

Q4. What is a database & types of databases?
 - A database is like a digital storage box where we keep data in an organized way so we can easily store, search, update, and delete it whenever needed.
 - Types of Databases :
      there are many, few of them are :
      - SQL databases (RDBMS)
      - NoSQL Database (Non-relational)
      - Hierarchical Database : Data is stored in a tree-like structure.

Q5. Difference Between SQL and NoSQL ?
| Feature            | SQL (Relational DB)                       | NoSQL (Non-Relational DB)                                      
| ----------| ---------------------------------------------------| --------------------------------------------------------                                     | Meaning   | Uses → tables (rows & columns) to store data.      | Stores data in different formats (documents, key-value pairs,graphs, etc.).            
| Structure | Structured → fixed schema (predefined columns).    | Flexible → schema-less (you can add new fields anytime).   
| Best For  | Data with relationships (student records, e-commerce orders) | Data that changes frequently or is unstructured (social media posts,JSON data).
| Scalability| Vertical scaling (increase CPU/RAM of one server) | Horizontal scaling (add more servers easily).  
| Query Language | Uses SQL (e.g., `SELECT * FROM Students`).    | Uses different query methods (e.g., JSON queries in MongoDB).  
| Examples       | MySQL, PostgreSQL, Oracle, SQL Server.        | MongoDB, Cassandra, Redis, Neo4j. 


Q6. What is a table in SQL?
A table in SQL is like an Excel sheet where data is stored in rows and columns. where
 - Columns = fields (like name, age, email).
 - Rows = records (actual data for each person/item).

 Q7. What is the difference between schema and database?
Database :
  - Definition :- A database is like a container that stores all your data in an organized way.
  - Think of it as :- a house
  - Contains :- Multiple schemas, tables, views, procedures, etc. 
  - Focus :- Stores the actual data. 
  - Example :- Database name: `SchoolDB`
Schema :
  - Definition :- A schema is the blueprint/structure inside a database,that defines how data is organized (tables, columns,relationships).  
  - Think of it as :- The floor plan of the house 
  - Contains :- Definitions of tables, columns, data types, relationships.
  - Focus :- Defines the structure of data.  
  - Example :- Schema inside `SchoolDB`: `Students(id, name, age)` 

Q8. What are constraints in SQL?
Constraints in SQL are rules applied on table columns to make sure the data is correct, valid, and reliable.
Types of Constraints :
    - NOT NULL → Ensures a column cannot have empty (NULL) values.
    - UNIQUE → Ensures all values in a column are different.
    - PRIMARY KEY → Uniquely identifies each row (combination of NOT NULL + UNIQUE).
    - FOREIGN KEY → Links one table’s column to another table’s primary key (creates relationship).
    - CHECK → Ensures values meet a condition.
    - DEFAULT → Provides a default value if none is given.
    - INDEX (not always grouped with constraints, but often mentioned) → Speeds up searching in a table.

Q9. What is NULL value in SQL?
In SQL, NULL means no value / unknown value / missing value. It is not 0, it is not an empty string '', it simply means nothing is stored in that column.
NULL can be stored in any data type (string, number, date, etc.).

Q10. What is the difference between CHAR and VARCHAR?
CHAR :
  - Meaning :- Fixed-length string.
  - Example :- CHAR(5) → "Cat" stored as "Cat " (2 extra spaces).
  - When to use:- Best for fixed-size data (e.g., country code "IND", gender "M/F").
VARCHAR:
  - Meaning:- Variable-length string.
  - Example:- VARCHAR(5) → "Cat" stored as "Cat" (no extra space).
  - When to use:- Best for variable-size data (e.g., names, emails, addresses).

Q11. Difference between DELETE, TRUNCATE, and DROP?
| Feature  | **DELETE**                                    | **TRUNCATE**                              | **DROP**                                     |
| ---------| ----------------------------------------------| ------------------------------------------| ---------------------------------------------|
| Purpose  | Remove specific rows from a table.            | Remove all rows from a table.             | Remove **entire table** (structure + data).  |
| yntax    | `DELETE FROM table_name WHERE condition;`     | `TRUNCATE TABLE table_name;`              | `DROP TABLE table_name;`                     |
| Condition| Can use WHERE clause to delete specific rows. | Cannot use WHERE clause; deletes all rows.| N/A (table is removed completely).           |

Q12. WHAT IS SQL INJECTION?
SQL Injection is a type of hacking where an attacker puts harmful SQL code  deleting tables, or bypassing login.
🔐 How to Prevent It?
-> Use prepared statements.
-> Use frameworks or ORMs (like JPA, Hibernate).

Q13. Difference between DDL vs DML?
DDL (Data Definition Language):
          - Used to create or change database structure.
          - Examples: CREATE, ALTER, DROP.
          - Think: “Define the table or database”.
DML (Data Manipulation Language):
          - Used to work with the data inside tables.
          - Examples: SELECT, INSERT, UPDATE, DELETE.
          - Think: “Manipulate or manage the data”.


Q14. Explain SQL vs PL/SQL?
SQL (Structured Query Language):
          - Used to query and manage data in a database.
          - Can do SELECT, INSERT, UPDATE, DELETE.
          - Works on single statements at a time.
          - Think: “It handles the data directly.”
PL/SQL (Procedural Language/SQL):
          - Extension of SQL with programming features (like loops, conditions, variables).
          - Can write blocks, procedures, functions, triggers.
          - Works on multiple SQL statements together.
          - Think: “It handles data with logic and control




(2) Constraints in SQL :
---------------------------

 Q1. Difference between Primary Key vs Unique Key?
   - Primary Key = main unique identifier, cannot be NULL, only one per table.
   - Unique Key = ensures uniqueness, can be NULL, multiple per table.

Q2. Difference between Primary Key vs Foreign Key?
Primary key :=
-> it is a column in a table that uniquely identifies each row.
-> there is only 1 PK & it should not null.
FOREIGN KEY :=
-> a foreign key is a column in a table that refers to the primary key in another table. 
-> there can be multiple FKs
-> FKs can have duplicates & null values.

Q3. What are composite keys?
A composite key is a primary key made up of two or more columns in a table.
eg- Imagine a school class:
         - Columns: class_id, student_id
         - student_id alone may repeat in different classes.
         - class_id + student_id together is unique.

Q4. Can a table have multiple primary keys?
No, a table cannot have multiple primary keys.
   - A table can have only one primary key.
   - But that primary key can be made up of multiple columns (this is called a composite key).




(3) SQL Joins :
-----------------

Q1. What are Joins in SQL?
A join in SQL is used to combine rows from two or more tables based on a related column between them. It helps you get data from multiple tables in a single query.

Q2. Explain INNER JOIN ?
An INNER JOIN returns only the rows that have matching values in both tables.If a row in one table does not have a match in the other table, it will not appear in the result.

Q3. Explain LEFT JOIN ?
A LEFT JOIN returns all rows from the left table, and the matching rows from the right table.If there is no match in the right table, it will return NULL for the right table’s columns.

 Q4. Explain RIGHT JOIN ?
A RIGHT JOIN returns all rows from the right table, and the matching rows from the left table. If there is no match in the left table, it will return NULL for the left table’s columns.

Q5. Explain FULL OUTER JOIN ?
A FULL OUTER JOIN returns all rows from both tables. If there is a match, it combines the rows. If there is no match in one table, it will return NULL for the missing side.

Q6. Difference between INNER JOIN and OUTER JOIN?
INNER JOIN → Returns only rows that have matching values in both tables.
                    - Rows without a match are ignored.
                    - Example: Only students who have marks.
OUTER JOIN → Returns all rows from one or both tables, including unmatched rows with NULLs.
                    - Types: LEFT, RIGHT, FULL
                    - Example: All students and all marks, even if some students have no marks or some marks have no students.

Q7. What is SELF JOIN?
A SELF JOIN is when a table is joined with itself.
    - It allows you to compare rows within the same table.
    - You must use aliases to tell the difference between the two copies of the table.

Q8. Difference between JOIN and UNION?
JOIN:
   - Combines columns from two or more tables based on a related column.
   - Returns single row with data from multiple tables.
   - Example: Get student name and their marks from two tables.
UNION:
   - Combines rows from two or more tables with the same number of columns and compatible data types.
   - Returns all rows from both tables stacked vertically.
   - Example: Get all students from Class A and Class B into one list.

Q9. What is CROSS JOIN?
A CROSS JOIN returns the all possible combinations product of two tables.
   - It combines every row from the first table with every row from the second table.
   - Usually used when you want all possible combinations of rows.
eg -
QUERY :>  SELECT T.color, S.size FROM TShirt T CROSS JOIN Size S;
RESULT:
| color | size |
| ----- | ---- |
| Red   | S    |
| Red   | M    |
| Blue  | S    |
| Blue  | M    |

Q10. Difference between UNION vs UNION ALL?
UNION:
  - Combines rows from two or more tables vertically.
  - Removes duplicate rows automatically.
  - Example: Get all students from Class A and Class B, but each student appears only once.
UNION ALL:
  - Combines rows from two or more tables vertically.
  - Keeps all duplicates.
  - Example: Get all students from Class A and Class B, including duplicates if a student is in both classes.





(4) SQL Statements & Queries :
--------------------------------

Q1. Difference between WHERE and HAVING?
WHERE:
   - Filters rows before any grouping (like GROUP BY).
   - Works on individual rows in a table.
   - Cannot be used with aggregate functions directly (like SUM, COUNT).
HAVING:
   - Filters rows after grouping (after GROUP BY).
   - Works on aggregated data (like total, count, average).
   - Used to filter grouped results.

Q2. Difference between GROUP BY and ORDER BY?
GROUP BY:
    - Groups rows that have the same values in specified columns.
    - Often used with aggregate functions like SUM, COUNT, AVG.
    - Purpose: to summarize data.
ORDER BY:
    - Sorts rows in a specific order (ascending ASC or descending DESC).
    - Can sort any column, aggregated or not.
    - Purpose: to arrange data neatly.

Q3. How do you fetch unique records in SQL?
To get only unique (distinct) records from a table, we use the DISTINCT keyword. It removes duplicate rows from the result.

 Q4. How to find the second highest salary in SQL?
There are multiple ways, but the most common ones are:
   a. Using LIMIT and ORDER BY
    - ORDER BY salary DESC 
    - LIMIT 1 OFFSET 1
  b. Using MAX() and WHERE :
    - Inner query finds the highest salary
    - Outer query finds the maximum salary less than the highest → second highest

Q5. How to find duplicate rows in SQL?
To find duplicates, we use GROUP BY on the column(s) we want to check, and then use HAVING COUNT(*) > 1. This tells us which value(s) appear more than once.

Q6. How to delete duplicate rows in SQL?
In MySQL, use DELETE with a self JOIN on duplicate columns, keeping the row with the smallest id.
eg- DELETE s1 FROM Students s1 INNER JOIN Students s2 WHERE s1.id > s2.id AND s1.name = s2.name AND s1.city = s2.city;

Q7. What is a subquery?
A subquery is a query inside another query. It is used to pass data from one query to another.Also called a nested query.

Q8. Difference between Correlated vs Non-Correlated subquery?
Non-Correlated Subquery:
   - Can run independently.
   - The inner query does not depend on the outer query.
   - Result is used by the outer query.
   - Example: SELECT name, marks FROM Students WHERE marks > (SELECT AVG(marks) FROM Students);
Correlated Subquery:
   - Depends on the outer query for its values.
   - Inner query is executed for each row of the outer query.
   - Slower than non-correlated.
   - Example : SELECT s1.name, s1.marks FROM Students s1 WHERE s1.marks > (SELECT AVG(s2.marks) FROM Students s2 WHERE s1.city = s2.city);

Q9. How to select first 5 records from a table?
Using LIMIT keyword: SELECT * FROM Employees LIMIT 5;

Q10. Difference between EXISTS and IN?
IN :
   - Compares a value with a list of values (from a subquery or hard-coded list).
   - Good when the subquery returns a small set of values.
   - The subquery is executed first and then compared.
   - Example: SELECT name FROM Students WHERE city IN (SELECT city FROM Teachers);
EXISTS :
   - Checks if the subquery returns at least one row.
   - Faster for large datasets because it stops searching as soon as it finds a match.
   - The subquery is executed for each row of the outer query.
   - Example: SELECT name FROM Students s WHERE EXISTS (SELECT 1 FROM Teachers t WHERE t.city = s.city);



Q11. Explain general order of SQL clauses in a SELECT query?
SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY -> (LIMIT: OPTIONAL).








(5) Indexes & Keys :
---------------------

Q1. What is an Index in SQL?
👉 An Index in SQL is like an index in a book. In SQL → instead of scanning the whole table, the database uses the index to quickly find rows.
Example : 
Before Index : searching name 
SELECT * FROM Employees WHERE name = 'John';
Doing Indexing : on the name 
-- Creating an index on 'name' column
CREATE INDEX idx_employee_name ON Employees(name);
After Index : searching name
SELECT * FROM Employees WHERE name = 'John';
Note:- The query is exactly the same, But now the database uses the index internally to directly jump to rows where name = 'John'.


Q2. Difference between Clustered and Non-Clustered Index?
Clustered Index :
      - Stores the actual data rows in sorted order (based on the indexed column).
      - There can be only ONE clustered index per table (because data rows can be physically sorted in only one way).
      - Faster for range queries (e.g., finding values between 100–200).
      - Example: CREATE CLUSTERED INDEX idx_emp_id ON Employees(EmployeeID);
Non-Clustered Index :
      - Does not change the actual table order.
      - Creates a separate structure (like a book’s index page) that stores the indexed column + pointer to the real data row.
      - A table can have multiple non-clustered indexes.
      - Faster for searching specific values.
      - Example: CREATE INDEX idx_emp_name ON Employees(Name);
Note:- 👉 By default, the Primary Key creates a Clustered Index (if no clustered index exists already).


Q3. Can we create multiple clustered indexes in a table?
👉 No, we cannot create multiple clustered indexes in a table. Reason: A clustered index defines the physical order of rows in the table.
Since the data can only be physically sorted in one order, only one clustered index is allowed per table.

Q4. What are composite indexes?
👉 A Composite Index is an index created on two or more columns together in a table. It’s useful when queries often search using multiple columns in the WHERE clause.
It improves performance for those multi-column searches.
Example: 
CREATE INDEX idx_emp_name_dept ON Employees(Name, Department);
Now, if you run a query like: SELECT * FROM Employees WHERE Name = 'John' AND Department = 'HR';

 Q5. When should you avoid indexes?
👉 While indexes speed up reads (SELECT), they can slow down writes (INSERT, UPDATE, DELETE) and consume extra memory.
So, you should avoid indexes in these situations:
   - Small Tables
   - Columns with High Number of Duplicate Values (Low Selectivity) Example: A Gender column (Male/Female), or Status column (Active/Inactive).

Q6. What is the difference between Primary Key and Index?
Primary Key :
     - A constraint (rule) that uniquely identifies each row in a table.
     - Automatically creates a unique clustered index (by default, in most databases like SQL Server/MySQL InnoDB).
     - A table can have only one primary key.
     - Ensures no duplicates and no NULL values.
Index :
     - A performance optimization feature that helps the database find data faster.
     - Can be clustered or non-clustered.
     - You can create multiple indexes on a table.
     - Index does not enforce uniqueness unless it’s a unique index.

Q7. What is covering index?
👉 A Covering Index is an index that contains all the columns a query needs — so the database can answer the query just by looking at the index, without touching the actual table.
Example : 
Suppose you have a table: Employees(EmpID, Name, Department, Salary)
Now, create an index on (Department, Salary): CREATE INDEX idx_dept_salary ON Employees(Department, Salary);
If you run this query: SELECT Department, Salary FROM Employees WHERE Department = 'HR';

Q8. What is a unique index?
👉 A Unique Index ensures that the values in the indexed column(s) are unique — no duplicate values are allowed.
     - Similar to a Unique Key constraint.
     - Automatically created when you define a PRIMARY KEY or UNIQUE constraint on a column.
     - You can also create it manually 
Example: 
-- Create a unique index on email column
CREATE UNIQUE INDEX idx_unique_email ON Employees(Email);
-- Now if you try to insert a duplicate email:
INSERT INTO Employees (EmpID, Name, Email) VALUES (101, 'John', 'john@example.com');

Q9. How do you drop an index in SQL?
👉 You use the DROP INDEX statement example : DROP INDEX idx_name ON Employees;




(6) Views & Stored Procedures :
--------------------------------

Q1. What is a View in SQL?
👉 A View in SQL is like a virtual table.
     - It does not store data itself.
     - Instead, it is based on a SELECT query that pulls data from one or more tables.
     - You can treat it like a normal table when querying.
Example :
Suppose you have a table Employees:
EmpID | Name   | Department | Salary
-----------------------------------
1     | John   | HR         | 40000
2     | Alice  | IT         | 50000
3     | Bob    | HR         | 45000
Now, create a view to show only HR employees:
CREATE VIEW HR_Employees AS SELECT Name, Salary FROM Employees WHERE Department = 'HR';
Now you can query it like a table:  
                             SELECT * FROM HR_Employees;
Output:
Name  | Salary
---------------
John  | 40000
Bob   | 45000

Q2. What are the advantages of using views?
👉 A View gives several benefits in SQL:
     - Simplifies Complex Queries : Instead of writing a long JOIN or WHERE condition every time, you can just query the view. 
     - Security (Data Hiding) : You can restrict access to certain columns or rows by creating a view. eg- Create a view without the Salary column so users cannot see                                    sensitive data.
     - Reusability : Once created, a view can be reused in multiple queries like a normal table.
     - Data Abstraction : Users don’t need to know the actual table structure. eg - They just query the view and get results.

Q3. Difference between View and Table?
| Feature         | Table                                    | View                                                 |
| --------------- | ---------------------------------------- | ---------------------------------------------------- |
| **Storage**     | Stores data physically on disk           | Does not store data; stores only the query           |
| **Data Access** | Can directly insert, update, delete rows | Mostly read-only (some views are updatable)          |
| **Creation**    | Created with `CREATE TABLE`              | Created with `CREATE VIEW`                           |
| **Purpose**     | Main storage for data                    | Simplify queries, hide data, provide abstraction     |
| **Dependency**  | Independent                              | Depends on base table(s)                             |

 Q4. Can we insert/update data using a View?
Yes, but only if the view is updatable. Not all views allow data modifications.


Q5. What is a Stored Procedure?
👉 A Stored Procedure is a pre-written SQL code saved in the database.
      - You can execute it whenever needed instead of writing the same SQL queries again.
      - Helps to perform repetitive tasks, improve performance.
Ex- 
-- Create a stored procedure to get employees of a department
CREATE PROCEDURE GetEmployeesByDept(IN dept_name VARCHAR(50))
BEGIN
    SELECT EmpID, Name, Salary
    FROM Employees
    WHERE Department = dept_name;
END;
Now Call the procedure: CALL GetEmployeesByDept('HR');
Note:- This will return all employees in the HR department.

Q6. What are the benefits of stored procedures?
Stored Procedures offer several advantages in SQL:
    - Reusability : Write the code once and use it multiple times in different applications or queries.
    - Improved Performance : Stored procedures are precompiled and stored in the database, so they run faster than ad-hoc queries.
    - Security : You can restrict direct access to the tables and allow users to perform operations only through the procedure.
    - Maintainability : Easy to update business logic in one place without changing the application code.

Q7. Difference between Function and Stored Procedure?
Function:
    - Returns a single value.
    - Can be used inside queries like SELECT.
    - Usually does not change data in the table.
    - Example: A function that calculates bonus for a salary.
Stored Procedure:
    - Performs a task or series of actions.
    - Can return multiple results or output parameters.
    - Can insert, update, or delete data.
    - Example: A procedure that gives a raise to an employee.


Q8. What is a Trigger?
👉 A Trigger is a special kind of stored procedure that automatically runs when certain events happen in a table.
    - You don’t call it manually.
    - It reacts to INSERT, UPDATE, or DELETE operations.
Example : Suppose you have a table Employees and you want to log every salary change in another table SalaryLog.
CREATE TRIGGER trg_salary_update
AFTER UPDATE ON Employees
FOR EACH ROW
BEGIN
    INSERT INTO SalaryLog(EmpID, OldSalary, NewSalary, ChangeDate)
    VALUES (OLD.EmpID, OLD.Salary, NEW.Salary, NOW());
END;
Note:- Whenever an employee’s salary is updated, this trigger automatically records the change in SalaryLog.


Q9. Difference between Trigger and Stored Procedure?
Trigger:
     - Runs automatically when an event happens (INSERT, UPDATE, DELETE) on a table.
     - Cannot be called manually.
     - Usually used for enforcing rules, auditing, or logging changes.
     - Example: Automatically log salary changes in another table when salary is updated.
Stored Procedure:
     - Must be called manually using CALL or EXEC.
     - Performs tasks like inserting, updating, or retrieving data.
     - Can be used anytime, not tied to a table event.
     - Example: Give a raise to an employee by calling the procedure.

Q10. What are Cursors in SQL?
👉 A Cursor is a database object that allows you to go through rows in a table one by one.
     - Normally, SQL works with sets of rows.
     - A cursor lets you process each row individually.
Example : Suppose you have a table Employees and you want to print each employee’s name one by one:
-- Declare cursor : DECLARE emp_cursor CURSOR FOR SELECT Name FROM Employees;
-- Open cursor : OPEN emp_cursor;
-- here process 
-- Close cursor : CLOSE emp_cursor;


Q11. Difference between Stored Procedure and View?
  - Stored Procedure: A saved set of SQL statements that performs tasks like insert, update, or delete. It can accept input values (parameters) and change data in the                           database.
 - View: A virtual table that displays data from one or more tables in a specific format. It cannot accept parameters and usually does not change data.





(7) Transactions & Locks :
---------------------------

Q1. What is a Transaction in SQL?
👉 A Transaction is a group of SQL statements that are executed together as a single unit of work.
    - Either all statements succeed, or none of them are applied.
    - Helps maintain data integrity.

Q2. What are ACID properties?
ACID properties are rules that ensure database transactions are safe and reliable.
      - Atomicity (All or Nothing) :
                    - A transaction must be fully completed or fully undone.
                    - Example: Transferring $100 from Alice to Bob → if one update fails, the whole transaction is rolled back.
      - Consistency (Data Validity) :
                    - Database must remain in a valid state before and after a transaction.
                    - Example: Total money in all accounts remains the same after a transfer.
      - Isolation (No Interference) :
                    - Transactions do not affect each other while running at the same time.
                    - Example: Two people transferring money simultaneously won’t mess up balances.
      - Durability (Permanent Changes) :
                    - Once a transaction is committed, its changes are permanent, even if the system crashes.


Q3. What are transaction control statements?
Transaction Control Statements are special SQL commands that help manage changes made by commands like INSERT, UPDATE, DELETE.
   - They let you group multiple operations into one transaction.
   - You can then decide to save all changes or undo them if something goes wrong.
   - Key Transaction Control Statements :
                      - BEGIN TRANSACTION
                      - COMMIT
                      - ROLLBACK
eg- 
BEGIN TRANSACTION;
-- Deduct $100 from account 1
UPDATE accounts 
SET balance = balance - 100 
WHERE account_id = 1;
-- Add $100 to account 2
UPDATE accounts 
SET balance = balance + 100 
WHERE account_id = 2;
COMMIT;  -- Save the changes permanently


Q4. Difference between COMMIT and ROLLBACK?
COMMIT :
    - Makes all changes in a transaction permanent in the database.
    - Example: After transferring money from Alice to Bob, if everything is correct, COMMIT saves the changes.
ROLLBACK :
    - Cancels all changes in a transaction and restores the database to its previous state.
    - Example: If something goes wrong during the transfer, ROLLBACK undoes all updates.

Q5. What is SAVEPOINT in SQL?
👉 A SAVEPOINT is like a bookmark inside a transaction.
            - It lets you partially undo changes instead of rolling back the whole transaction.
            - You can roll back to a specific savepoint without affecting previous changes.
eg - 
BEGIN TRANSACTION;
UPDATE accounts 
SET balance = balance - 100 
WHERE account_id = 1;
SAVEPOINT sp1;  -- Create a savepoint here
UPDATE accounts 
SET balance = balance + 100 
WHERE account_id = 2;
-- Something goes wrong, undo only the second update
ROLLBACK TO SAVEPOINT sp1;
COMMIT;  -- Save changes from the first update permanently

Q6. What is a Deadlock in SQL?
👉 A Deadlock happens when two or more transactions are waiting for each other to release resources (like a table or row), and none of them can proceed.
It’s like a traffic jam where cars block each other.
How to Prevent Deadlocks in SQL :
          - Access Tables in the Same Order : If one transaction updates Table A then Table B, all others should do the same.
          - Keep Transactions Short : Avoid long transactions.


Q7. Difference between Pessimistic vs Optimistic Locking?
Pessimistic Locking :
     - Assumes conflicts will happen.
     - Locks the data immediately when a transaction reads it, so others cannot modify it until the transaction is done.
     - Used in high-conflict situations.
Example:
Transaction 1 locks a row in a table to update it.
Transaction 2 must wait until Transaction 1 finishes.
Beginner analogy: Like putting a “Do Not Disturb” sign on a room while you’re inside.
Optimistic Locking :
     - Assumes conflicts are rare.
     - Does not lock data when reading.
     - Before updating, it checks if someone else changed it. If yes, the transaction is rolled back or retried.
Example:
Transaction 1 reads a row.
Transaction 2 reads the same row.
When Transaction 1 tries to update, the system checks if Transaction 2 changed it. If yes → retry or cancel.
Beginner analogy:
        Like taking a book from the shelf without a lock, but checking the book’s last page to see if someone else wrote in it before you update.


Q8. How do you handle transactions in MySQL?
In MySQL, a transaction is a set of SQL statements that are executed together. You can start, commit, or rollback a transaction using special commands.





(8) Functions & Operators :
------------------------------

Q1. What are Aggregate Functions in SQL? (COUNT, SUM, AVG, MAX, MIN)
👉 Aggregate Functions are special SQL functions that do calculations on a group of rows and return a single value.
They are mostly used with GROUP BY to summarize data.
eg - 
- SELECT COUNT(*) FROM Employees;
- SELECT SUM(Salary) FROM Employees;
- SELECT Department, SUM(Salary) AS TotalSalary FROM Employees GROUP BY Department;

Q2. What are Scalar Functions in SQL?
👉 Scalar functions are SQL functions that work on a single value and return a single value as result (not a group of rows).
They are different from aggregate functions, which work on multiple rows.
Common Types of Scalar Functions :
                            String Functions :
                                           - UPPER('hello') → HELLO
                                           - LOWER('HELLO') → hello
                                           - LENGTH('SQL') → 3
                            Numeric Functions :
                                           - ROUND(123.456, 2) → 123.46
                                           - ABS(-50) → 50
                            Date & Time Functions :
                                           - NOW() → Current date & time
                                           - YEAR('2025-10-04') → 2025
                                           - MONTH('2025-10-04') → 10
                            Conversion Functions :
                                           - CAST('123' AS INT) → 123 (converts string to integer)
                                           - CONVERT(DATE, '2025-10-04') → 2025-10-04


Q3. What are String Functions in SQL? (UPPER, LOWER, SUBSTR, CONCAT, etc.) ?
👉 String functions are built-in SQL functions used to work with text (string) values.
Common String Functions :
       - UPPER() – Converts text to uppercase. eg- SELECT UPPER('hello');  // Output: HELLO
       - LOWER() – Converts text to lowercase. eg- SELECT LOWER('SQL ROCKS');  // Output: sql rocks
       - LENGTH() – Returns the number of characters. eg- SELECT LENGTH('Database');  // Output: 8
       - SUBSTR() (or SUBSTRING() in some DBs) – Extracts part of a string. eg- SELECT SUBSTR('Database', 1, 4);  // Output: Data
       - CONCAT() – Joins (adds) two or more strings. eg- SELECT CONCAT('SQL', ' ', 'Functions');  // Output: SQL Functions
       - TRIM() – Removes spaces from both sides of a string. eg- SELECT TRIM('   Hello SQL   ');  // Output: Hello SQL
       - REPLACE() – Replaces part of a string with something else. eg- SELECT REPLACE('I like SQL', 'like', 'love');  // Output: I love SQL


Q4. What are Date Functions in SQL? (NOW, CURDATE, DATEADD, DATEDIFF, etc.) ?
👉 Date functions are built-in SQL functions used to work with dates and times.
         Common Date Functions :
               - NOW() → Returns current date and time. eg - SELECT NOW();  // 2025-10-04 18:35:20
               - CURDATE() → Returns only current date (without time). eg - SELECT CURTIME(); //  2025-10-04
               - CURTIME() → Returns only current time. eg - SELECT CURTIME(); // 18:35:20 
               - DATEADD() (SQL Server) or DATE_ADD() (MySQL) → Adds days, months, or years to a date. eg - SELECT DATE_ADD('2025-10-04', INTERVAL 10 DAY); // 2025-10-14
               - DATEDIFF() → Finds difference between two dates. eg - SELECT DATEDIFF('2025-12-31', '2025-10-04'); // 88
               - YEAR(), MONTH(), DAY() → Extract parts of a date. eg - SELECT YEAR('2025-10-04'), MONTH('2025-10-04'), DAY('2025-10-04'); // 2025 | 10 | 4
               - LAST_DAY() → Returns last day of the month. eg - SELECT LAST_DAY('2025-10-04'); // 2025-10-31  

Q5. Difference between ROUND(), CEIL(), FLOOR()?
ROUND() :
ROUND(number, decimal_places)
👉 Rounds a number to the nearest value, based on decimal places.
             - If decimal part ≥ 0.5 → round up
             - If decimal part < 0.5 → round down
 eg - SELECT ROUND(12.345, 2);  -- 12.35
CEIL(number) or CEILING(number) :
👉 Always rounds the number up to the nearest whole number (integer).
eg - 
SELECT CEIL(12.1);  -- 13
SELECT CEIL(12.9);  -- 13
FLOOR(number)  :
👉 Always rounds the number down to the nearest whole number (integer).
eg -
SELECT FLOOR(12.1);  -- 12
SELECT FLOOR(12.9);  -- 12


Q6. What is CASE WHEN in SQL?
👉 CASE WHEN is used to apply conditions in SQL and return different values based on those conditions.
Think of it like an IF-ELSE statement in programming.
eg -
SELECT Name, Salary,
       CASE
           WHEN Salary >= 55000 THEN 'High'
           WHEN Salary >= 45000 THEN 'Medium'
           ELSE 'Low'
       END AS SalaryLevel
FROM Employees;


Q7. What is the difference between COUNT(*) vs COUNT(column_name)?
COUNT(*) :
    - Counts all rows in a table, including rows with NULL values.
    - Ignores nothing.
COUNT(column_name) :
    - Counts only the rows where the specified column is NOT NULL.
    - Ignores rows where that column is NULL.



Q8. What are SQL operators? Describe their types ?
SQL operators are symbols or keywords used in SQL statements to perform operations on data. SQL operators are used in WHERE, HAVING, SELECT, and other clauses to perform various operations.
Operator types :
-> Arithmetic Operators : + , -  , * , /  ,  %
-> Comparison Operators : = , != , > , >= , < , <=
-> Logical Operators    : AND , OR, NOT, IN , BETWEEN , ALL, LIKE, ANY .
-> Bitwise Operators :    &  ,  | 

Q9. EXPLAIN AND , OR, BETWEEN, IN, NOT Operators ?
AND :=
to check for both conditions to be true.
OR :=
to check for one of the conditions to be true.
BETWEEN :=
selects for a given range.
IN :=
matches any value in the list.
NOT:=
to negate the given condition.


Q10. How do you calculate total salary after a 10% bonus?
A: Use '+'  and '*' operators:
eg- SELECT Name, Salary, Salary * 1.10 AS SalaryWithBonus FROM Employees;

Q11. How do you find employees with salary greater than 50000?
A: Use > operator:
eg- SELECT Name, Salary FROM Employees WHERE Salary > 50000;

Q12. How to find employees whose salary is not 50000?
Use ! Operator :
eg - SELECT Name, Salary FROM Employees WHERE Salary != 50000;

Q13. How to find employees in IT department and salary > 50000?
Use 'and' Operator :
eg - SELECT Name, Department, Salary FROM Employees WHERE Department = 'IT' AND Salary > 50000;

Q14. How to find employees in IT or HR?
Use 'or' Operator :
eg - SELECT Name, Department FROM Employees WHERE Department = 'IT' OR Department = 'HR';

Q15. How to find employees whose name starts with ‘J’?
Use 'like %' Operator :
eg - SELECT Name FROM Employees WHERE Name LIKE 'J%';

Q16. How to find employees in IT or HR using a shortcut?
Use 'in' Operator :
eg - SELECT Name, Department FROM Employees WHERE Department IN ('IT', 'HR');

Q17. Get all employees except those from IT and HR ?
Use 'Not in ' Operator :
eg - SELECT Name, Department FROM Employees WHERE Department NOT IN ('IT', 'HR');

Q18. How to find employees with salary between 40000 and 60000?
Use 'between , and' Operator :
eg - SELECT Name, Salary FROM Employees WHERE Salary BETWEEN 40000 AND 60000;

Q19. How to find employees whose Incentive is NULL?
Use 'is null' Operator :
eg - SELECT Name, Incentive FROM Employees WHERE Incentive IS NULL;

Q20. How to find employees whose Incentive is NOT NULL?
Use 'is not null ' Operator :
eg - SELECT Name, Commission FROM Employees WHERE Incentive IS NOT NULL;





(9) Normalization & Design :
------------------------------

Q1. What is Normalization?
👉 Normalization is a process in database design to organize data in a way that:
       - Removes duplicate data
       - Reduces redundancy
       - Improves data integrity
Normalization devides larger tables into smaller tables and link them using relationships( primary key & foreign key).

Q2. What are different Normal Forms (1NF, 2NF, 3NF, BCNF)?
First Normal Form (1NF) :
--------------------------
            - Each column should contain only atomic (single) values, and each row must be unique.
            - No repeating groups or arrays in a column.
Example:
Bad table (not 1NF):
| EmpID | Name  | Skills    |
| ----- | ----- | --------- |
| 1     | John  | Java, SQL |
| 2     | Alice | Python    |
Normalized to 1NF:
| EmpID | Name  | Skill  |
| ----- | ----- | ------ |
| 1     | John  | Java   |
| 1     | John  | SQL    |
| 2     | Alice | Python |
Second Normal Form (2NF)  :
----------------------------
            - Table should be in 1NF and all non-key columns must depend on the full primary key.
            - Applies only if primary key is composite.
Example:
Table (1NF, but not 2NF):
| EmpID | ProjectID | EmpName | ProjectName |
| ----- | --------- | ------- | ----------- |
| 1     | 101       | John    | CRM         |
Normalized to 2NF:
Employee Table:
| EmpID | EmpName |
| ----- | ------- |
| 1     | John    |
Project Table:
| ProjectID | ProjectName |
| --------- | ----------- |
| 101       | CRM         |
Assignment Table:
| EmpID | ProjectID |
| ----- | --------- |
| 1     | 101       |
Third Normal Form (3NF) :
----------------------------
Table should be in 2NF and no transitive dependency (non-key column depends on another non-key column).
Example:
Table (2NF, but not 3NF):
| EmpID | EmpName | Dept | DeptLocation |
| ----- | ------- | ---- | ------------ |
| 1     | John    | IT   | New York     |
Normalized to 3NF:
Employee Table:
| EmpID | EmpName | DeptID |
| ----- | ------- | ------ |
| 1     | John    | 1      |
Department Table:
| DeptID | DeptName | DeptLocation |
| ------ | -------- | ------------ |
| 1      | IT       | New York     |


Q3. What is Denormalization?
👉 Denormalization is the opposite of normalization.
        - It means combining tables or adding redundant data to make the database faster for queries.
        - Sometimes, strictly normalized tables are slow to read because you need to join many tables.
        - Denormalization trades a little redundancy for better performance.
Example :
Suppose we have normalized tables:
Employee Table:
| EmpID | Name  | DeptID |
| ----- | ----- | ------ |
| 1     | John  | 1      |
| 2     | Alice | 2      |
Department Table:
| DeptID | DeptName | DeptLocation |
| ------ | -------- | ------------ |
| 1      | IT       | New York     |
| 2      | HR       | London       |
- To get employee name with department location, we need a JOIN:         SELECT e.Name, d.DeptLocation FROM Employee e JOIN Department d ON e.DeptID = d.DeptID;
After denormalization, we can combine into one table:
| EmpID | Name  | DeptID | DeptName | DeptLocation |
| ----- | ----- | ------ | -------- | ------------ |
| 1     | John  | 1      | IT       | New York     |
| 2     | Alice | 2      | HR       | London       |
- Now, no JOIN needed, faster to read.


Q4. What is E-R Diagram?
👉 E-R Diagram (Entity-Relationship Diagram) is a visual representation of a database.
     - It shows how tables (entities) are connected and what relationships exist between them.
     - Helps in designing a database before actually creating it.


Q5. What are Cardinalities in ER model?
In simple words, it tells “how many” of one table are related to “how many” of another table.
Types of Cardinalities :
                - One-to-One (1:1)
                - One-to-Many (1:N)
                - Many-to-Many (M:N)


Q6. What is Data Redundancy?
👉 Data Redundancy happens when the same piece of data is stored in multiple places in a database.
It wastes storage and can cause inconsistency if one copy is updated and another is not.






(33) Difference between Stored Procedure and View?

| Feature                 | **Stored Procedure**                                   | **View**                                                    |
| ----------------------- | ------------------------------------------------------ | ----------------------------------------------------------- |
| **Stored in DB?**       | ✅ Yes, stored in the database with a name              | ❌ Not physical, just a saved SQL query (virtual table)      |
| **Execution**           | Can be executed using `CALL procedure_name()`          | Used like a table: `SELECT * FROM view_name`                |
| **Accepts Parameters?** | ✅ Yes, can take input/output parameters                | ❌ No parameters allowed                                     |
| **Can Contain Logic?**  | ✅ Yes (can use `IF`, `LOOP`, `CASE`, etc.)             | ❌ No logic; only a single `SELECT` query                    |
| **Can Modify Data?**    | ✅ Yes (can perform `INSERT`, `UPDATE`, `DELETE`, etc.) | ❌ Generally no; mostly used to display data                 |
| **Used For**            | Reusable complex operations or business logic          | Simplifying complex queries; showing data in a specific way |
