(1) Basics of SQL :
--------------------

Q1. What is SQL?
 - SQL stands for Structured Query Language.
 - It is like a language to talk with databases.
 - Just like we use English or Hindi to communicate with people, we use SQL to communicate with databases – to ask for data, add new data, change data, or         delete data.  

Q2. Difference between SQL and MySQL?
SQL (Structured Query Language):
 - SQL is just a language used to talk with databases.
 - It provides commands like SELECT, INSERT, UPDATE, DELETE.
 - Think of it like English grammar – rules you use to form sentences.
MySQL:
 - MySQL is a database software (RDBMS) that understands SQL language.
 - It stores data in tables and lets you use SQL to manage that data.
 - Think of it like a library system where you keep books (data) and ask queries using SQL.

Q3. Can you name the different categories of SQL statements?
SQL commands are categorized into 5 types: DDL, DML, DQL, DCL, TCL.
1. DDL – Data Definition Language : 
Purpose: DDL me wo commands ati hai jo kewal or kewal table or database ke structure ki bat karti hai , record ki bat nhi krti hai / Define or modify database structure.
Commands: CREATE, ALTER, DROP, TRUNCATE, RENAME
2. DML – Data Manipulation Language
Purpose: Work with the data/record inside tables.
Commands: INSERT, UPDATE, DELETE, MERGE
3. DQL – Data Query Language 
Purpose: Retrieve data from database.
Command: SELECT
4. DCL – Data Control Language
Purpose: Control access and permissions.
Commands: GRANT:- jaise insert k liye prevelage dena hai ya nhi, REVOKE: agr kisi moment pe un previlege ko wapis/rollback krna hai to revoke ka use krte hai
5. TCL – Transaction Control Language
Purpose: Manage transactions (group of operations).
Commands: COMMIT, ROLLBACK, SAVEPOINT

Q4. What is a database & types of databases?
 - A database is like a digital storage box where we keep data in an organized way so we can easily store, search, update, and delete it whenever needed.
 - Types of Databases :
      there are many, few of them are :
      - SQL databases (RDBMS)
      - NoSQL Database (Non-relational)
      - Hierarchical Database : Data is stored in a tree-like structure.

Q5. Difference Between SQL and NoSQL ?
| Feature            | SQL (Relational DB)                       | NoSQL (Non-Relational DB)                                      
| ----------| ---------------------------------------------------| --------------------------------------------------------                                     | Meaning   | Uses → tables (rows & columns) to store data.      | Stores data in different formats (documents, key-value pairs,graphs, etc.).            
| Structure | Structured → fixed schema (predefined columns).    | Flexible → schema-less (you can add new fields anytime).   
| Best For  | Data with relationships (student records, e-commerce orders) | Data that changes frequently or is unstructured (social media posts,JSON data).
| Scalability| Vertical scaling (increase CPU/RAM of one server) | Horizontal scaling (add more servers easily).  
| Query Language | Uses SQL (e.g., `SELECT * FROM Students`).    | Uses different query methods (e.g., JSON queries in MongoDB).  
| Examples       | MySQL, PostgreSQL, Oracle, SQL Server.        | MongoDB, Cassandra, Redis, Neo4j. 


Q6. What is a table in SQL?
A table in SQL is like an Excel sheet where data is stored in rows and columns. where
 - Columns = fields (like name, age, email).
 - Rows = records (actual data for each person/item).

 Q7. What is the difference between schema and database?
Database :
  - Definition :- A database is like a container that stores all your data in an organized way.
  - Think of it as :- a house
  - Contains :- Multiple schemas, tables, views, procedures, etc. 
  - Focus :- Stores the actual data. 
  - Example :- Database name: `SchoolDB`
Schema :
  - Definition :- A schema is the blueprint/structure inside a database,that defines how data is organized (tables, columns,relationships).  
  - Think of it as :- The floor plan of the house 
  - Contains :- Definitions of tables, columns, data types, relationships.
  - Focus :- Defines the structure of data.  
  - Example :- Schema inside `SchoolDB`: `Students(id, name, age)` 

Q8. What are constraints in SQL?
Constraints in SQL are rules applied on table columns to make sure the data is correct, valid, and reliable.
Types of Constraints :
    - NOT NULL → Ensures a column cannot have empty (NULL) values.
    - UNIQUE → Ensures all values in a column are different.
    - PRIMARY KEY → Uniquely identifies each row (combination of NOT NULL + UNIQUE).
    - FOREIGN KEY → Links one table’s column to another table’s primary key (creates relationship).
    - CHECK → Ensures values meet a condition.
    - DEFAULT → Provides a default value if none is given.
    - INDEX (not always grouped with constraints, but often mentioned) → Speeds up searching in a table.

Q9. What is NULL value in SQL?
In SQL, NULL means no value / unknown value / missing value. It is not 0, it is not an empty string '', it simply means nothing is stored in that column.
NULL can be stored in any data type (string, number, date, etc.).

Q10. What is the difference between CHAR and VARCHAR?
CHAR :
  - Meaning :- Fixed-length string.
  - Example :- CHAR(5) → "Cat" stored as "Cat " (2 extra spaces).
  - When to use:- Best for fixed-size data (e.g., country code "IND", gender "M/F").
VARCHAR:
  - Meaning:- Variable-length string.
  - Example:- VARCHAR(5) → "Cat" stored as "Cat" (no extra space).
  - When to use:- Best for variable-size data (e.g., names, emails, addresses).

Q11. Difference between DELETE, TRUNCATE, and DROP?
| Feature  | **DELETE**                                    | **TRUNCATE**                              | **DROP**                                     |
| ---------| ----------------------------------------------| ------------------------------------------| ---------------------------------------------|
| Purpose  | Remove specific rows from a table.            | Remove all rows from a table.             | Remove **entire table** (structure + data).  |
| yntax    | `DELETE FROM table_name WHERE condition;`     | `TRUNCATE TABLE table_name;`              | `DROP TABLE table_name;`                     |
| Condition| Can use WHERE clause to delete specific rows. | Cannot use WHERE clause; deletes all rows.| N/A (table is removed completely).           |




(2) Constraints in SQL :
---------------------------

 Q1. Difference between Primary Key vs Unique Key?
   - Primary Key = main unique identifier, cannot be NULL, only one per table.
   - Unique Key = ensures uniqueness, can be NULL, multiple per table.

Q2. Difference between Primary Key vs Foreign Key?
Primary key :=
-> it is a column in a table that uniquely identifies each row.
-> there is only 1 PK & it should not null.
FOREIGN KEY :=
-> a foreign key is a column in a table that refers to the primary key in another table. 
-> there can be multiple FKs
-> FKs can have duplicates & null values.

Q3. What are composite keys?
A composite key is a primary key made up of two or more columns in a table.
eg- Imagine a school class:
         - Columns: class_id, student_id
         - student_id alone may repeat in different classes.
         - class_id + student_id together is unique.

Q4. Can a table have multiple primary keys?
No, a table cannot have multiple primary keys.
   - A table can have only one primary key.
   - But that primary key can be made up of multiple columns (this is called a composite key).




(3) SQL Joins :
-----------------

Q1. What are Joins in SQL?
A join in SQL is used to combine rows from two or more tables based on a related column between them. It helps you get data from multiple tables in a single query.

Q2. Explain INNER JOIN ?
An INNER JOIN returns only the rows that have matching values in both tables.If a row in one table does not have a match in the other table, it will not appear in the result.

Q3. Explain LEFT JOIN ?
A LEFT JOIN returns all rows from the left table, and the matching rows from the right table.If there is no match in the right table, it will return NULL for the right table’s columns.

 Q4. Explain RIGHT JOIN ?
A RIGHT JOIN returns all rows from the right table, and the matching rows from the left table. If there is no match in the left table, it will return NULL for the left table’s columns.

Q5. Explain FULL OUTER JOIN ?
A FULL OUTER JOIN returns all rows from both tables. If there is a match, it combines the rows. If there is no match in one table, it will return NULL for the missing side.

Q6. Difference between INNER JOIN and OUTER JOIN?
INNER JOIN → Returns only rows that have matching values in both tables.
                    - Rows without a match are ignored.
                    - Example: Only students who have marks.
OUTER JOIN → Returns all rows from one or both tables, including unmatched rows with NULLs.
                    - Types: LEFT, RIGHT, FULL
                    - Example: All students and all marks, even if some students have no marks or some marks have no students.

Q7. What is SELF JOIN?
A SELF JOIN is when a table is joined with itself.
    - It allows you to compare rows within the same table.
    - You must use aliases to tell the difference between the two copies of the table.

Q8. Difference between JOIN and UNION?
JOIN:
   - Combines columns from two or more tables based on a related column.
   - Returns single row with data from multiple tables.
   - Example: Get student name and their marks from two tables.
UNION:
   - Combines rows from two or more tables with the same number of columns and compatible data types.
   - Returns all rows from both tables stacked vertically.
   - Example: Get all students from Class A and Class B into one list.

Q9. What is CROSS JOIN?
A CROSS JOIN returns the all possible combinations product of two tables.
   - It combines every row from the first table with every row from the second table.
   - Usually used when you want all possible combinations of rows.
eg -
QUERY :>  SELECT T.color, S.size FROM TShirt T CROSS JOIN Size S;
RESULT:
| color | size |
| ----- | ---- |
| Red   | S    |
| Red   | M    |
| Blue  | S    |
| Blue  | M    |

Q10. Difference between UNION vs UNION ALL?
UNION:
  - Combines rows from two or more tables vertically.
  - Removes duplicate rows automatically.
  - Example: Get all students from Class A and Class B, but each student appears only once.
UNION ALL:
  - Combines rows from two or more tables vertically.
  - Keeps all duplicates.
  - Example: Get all students from Class A and Class B, including duplicates if a student is in both classes.





(4) SQL Statements & Queries :
--------------------------------

Q1. Difference between WHERE and HAVING?
WHERE:
   - Filters rows before any grouping (like GROUP BY).
   - Works on individual rows in a table.
   - Cannot be used with aggregate functions directly (like SUM, COUNT).
HAVING:
   - Filters rows after grouping (after GROUP BY).
   - Works on aggregated data (like total, count, average).
   - Used to filter grouped results.

Q2. Difference between GROUP BY and ORDER BY?
GROUP BY:
    - Groups rows that have the same values in specified columns.
    - Often used with aggregate functions like SUM, COUNT, AVG.
    - Purpose: to summarize data.
ORDER BY:
    - Sorts rows in a specific order (ascending ASC or descending DESC).
    - Can sort any column, aggregated or not.
    - Purpose: to arrange data neatly.

Q3. How do you fetch unique records in SQL?
To get only unique (distinct) records from a table, we use the DISTINCT keyword. It removes duplicate rows from the result.

 Q4. How to find the second highest salary in SQL?
There are multiple ways, but the most common ones are:
   a. Using LIMIT and ORDER BY
    - ORDER BY salary DESC 
    - LIMIT 1 OFFSET 1
  b. Using MAX() and WHERE :
    - Inner query finds the highest salary
    - Outer query finds the maximum salary less than the highest → second highest































(5) What is View ?
A View is a virtual Table based on the result-set of an SQL statement .
it doesn't store data any where rather , a view always shows up-to-date data. and the database engine recreate the view every time a user queries it.

(6) What are Sub Queries ?
a sub query or inner query or a nested query is a query within another SQL Query. it involves 2 select statements.

(7) what is Union ?
it is used to combine the result-set of two or more SELECT statements.
it gives Unique Records.
to use it: -> every SELECT should have same no.of columns.
           -> columns must have similar data types.
           -> columns in every SELECT should be in same order. 



(9) Explain  general order of SQL clauses in a SELECT query?

SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY -> (LIMIT: OPTIONAL).

(10) What are Aggregate Functions?
Aggregate Functions perform a calculation on a set of values. and return a single value .
Aggregate Functions are:
-> count()
-> Max()
-> Min()
-> Sum()
-> Avg()

(11) What are SQL operators? Describe their types ?
-> Arithmetic Operators : + , -  , * , /  ,  %
-> Comparison Operators : = , != , > , >= , < , <=
-> Logical Operators    : AND , OR, NOT, IN , BETWEEN , ALL, LIKE, ANY .
-> Bitwise Operators :    &  ,  | 

(12) EXPLAIN AND , OR, BETWEEN, IN, NOT Operators ?
AND :=
to check for both conditions to be true.

OR :=
to check for one of the conditions to be true.

BETWEEN :=
selects for a given range.

IN :=
matches any value in the list.

NOT:=
to negate the given condition.


(13) What is a clause in SQL and why is it used , Tell names of Cluse?
A clause in SQL is a part of a SQL statement that defines specific conditions or behavior to retrieve, filter, group, or sort data from a database.

(14) Explain Where Cluse?
to define some condition.

(15) Explain having cluse?
similar to where cluse. it applies some condition on rows.
it is used when we want to apply any condition after grouping.
eg. count no.of students in each city where max marks across 90.

(16) Explain Group By Cluse?
group rows that have the same value into summary rows.
it collects data from multiple records and group the result by one or more column.
generally we use group by with some aggregation function.
eg. count number of student in each city.

(17) Explain Order By Cluse?
to sort in ascending or descending order. 

(18) Explain Limit Cluse ?
Sets an Upper Limit on a number of rows to be returned.








(22) What are the different data types supported in SQL?

refer sharda notes.

(23) WHAT IS NORMALIZATION?
-> Normalization is a database design technique that organize tables in manner that reduce redundancy and dependency of data.
-> To avoid insertion ,updation and deletion anomaly.
-> Normalization devides larger tables into smaller tables and link them using relationships( primary key & foreign key).

(24) Explain types of Normalization ?
Most Commonly Used Normal Forms (7) :
(a) 1NF (First Normal Form).
(b) 2NF (Second Normal Form).
(c) 3NF (Third Normal Form).
(d) BCNF (Boyce & Codd Normal Form).
(e) 4NF (Fourth Normal Form).
(f) 5NF (Fifth Normal Form).
(g) 6NF (Sixth Normal Form).

(25) What are transaction control statements?
Transaction Control Statements in SQL are special commands used to manage changes made by DML (Data Manipulation Language) statements like INSERT, UPDATE, and DELETE. 
They help in grouping multiple operations into a single unit (called a transaction) and controlling whether the changes should be saved permanently or undone.

** Key Transaction Control Statements **: 
-> BEGIN TRANSACTION: Marks the start of a transaction.
-> COMMIT: Saves all changes made by the transaction to the database. It is used to finalize the transaction.
-> ROLLBACK: Reverts all changes made by the transaction if an error occurs, restoring the database to its previous state.

Example:
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT;

(26) What is ACID Properties ?
ACID properties are fundamental to how transactions ensure reliability, integrity, and consistency in database operations.
By following the ACID properties, a database system ensures that transactions are processed correctly and completely, even in the event of failures or crashes.

(27) Explain Each ACID Properties & How do BEGIN, COMMIT, and ROLLBACK help a database work with ACID properties?

| **ACID Rule**   | **What it Means**                              | **Which Command Helps**         |
| --------------- | ---------------------------------------------- | ------------------------------- |
| **Atomicity**   | Do everything or do nothing                    | `ROLLBACK` cancels all if error |
| **Consistency** | Keep data correct and follow rules             | `COMMIT` only if all OK         |
| **Isolation**   | Transactions don’t affect each other           | Handled by database engine      |
| **Durability**  | Once saved, data stays safe even after a crash | `COMMIT` saves changes forever  |

(28) DIFFERENCE BETWEEN DROP, DELETE AND TRUNCATE?

| Feature                          | `DROP`                             | `DELETE`                           | `TRUNCATE`                                   |
| -------------------------------- | ---------------------------------- | ---------------------------------- | -------------------------------------------- |
| **Purpose**                      | Removes the entire table structure | Removes specific rows from a table | Removes all rows from a table                |
| **Removes Data**                 | ✅ Yes                              | ✅ Yes (as per condition)          | ✅ Yes (all rows)                            |
| **Removes Table Structure**      | ✅ Yes                              | ❌ No                              | ❌ No                                        |

(29) DIFFERENCE BETWEEN DDL VS DML?

| Feature                | DDL (Data Definition Language)                          | DML (Data Manipulation Language)                  |
| ---------------------- | ------------------------------------------------------- | ------------------------------------------------- |
| **Full Form**          | Data Definition Language                                | Data Manipulation Language                        |
| **Main Purpose**       | Defines **structure** of database objects (like tables) | Used to **work with data** inside the tables      |
| **What it does**       | Creates, changes, or deletes tables, columns            | Adds, changes, or deletes data (rows) in tables   |
| **Examples**           | `CREATE`, `ALTER`, `DROP`, `TRUNCATE`                   | `SELECT`, `INSERT`, `UPDATE`, `DELETE`            |
| **Used by?**           | Database administrators / designers                     | Users and developers                              |

(30) EXPLAIN SQL VS P/SQL?

| Feature               | SQL (Structured Query Language)                           | PL/SQL (Procedural Language/SQL)                                 |
| --------------------- | --------------------------------------------------------- | ---------------------------------------------------------------- |
| **Full Form**         | Structured Query Language                                 | Procedural Language extension to SQL                             |
| **What it is?**       | A **query language** to talk to the database              | A **programming language** to write logic using SQL              |
| **Main Purpose**      | To **fetch, insert, update, delete** data in the database | To **write programs** with **logic + SQL** (like loops, if-else) |
| **Runs**              | One SQL query at a time                                   | A full program (block of code)                                   |
| **Support for Logic** | ❌ No (only commands)                                     | ✅ Yes (supports logic like `if`, `for`, `while`, etc.)          |
| **Used by**           | Anyone working with simple database tasks                 | Developers writing complex business logic                        |

(31) WHAT IS SQL INJECTION?
SQL Injection is a type of hacking where an attacker puts harmful SQL code  deleting tables, or bypassing login.
🔐 How to Prevent It?
-> Use prepared statements.
-> Use frameworks or ORMs (like JPA, Hibernate).

(32) What is Stored Procedure?
a stored procedure is a group of T-SQL Statements. if you have a situation, where you write the same query over & over again,
you can save that specific query as a stored procedure and call it just by it's name.

(33) Difference between Stored Procedure and View?

| Feature                 | **Stored Procedure**                                   | **View**                                                    |
| ----------------------- | ------------------------------------------------------ | ----------------------------------------------------------- |
| **Stored in DB?**       | ✅ Yes, stored in the database with a name              | ❌ Not physical, just a saved SQL query (virtual table)      |
| **Execution**           | Can be executed using `CALL procedure_name()`          | Used like a table: `SELECT * FROM view_name`                |
| **Accepts Parameters?** | ✅ Yes, can take input/output parameters                | ❌ No parameters allowed                                     |
| **Can Contain Logic?**  | ✅ Yes (can use `IF`, `LOOP`, `CASE`, etc.)             | ❌ No logic; only a single `SELECT` query                    |
| **Can Modify Data?**    | ✅ Yes (can perform `INSERT`, `UPDATE`, `DELETE`, etc.) | ❌ Generally no; mostly used to display data                 |
| **Used For**            | Reusable complex operations or business logic          | Simplifying complex queries; showing data in a specific way |

(34) WHAT is Function ?
A function in SQL takes input (optional), performs an operation, and returns a single value. It can be either built-in or user-defined.
like, 
Built-in SQL Functions :
--------------------------
Aggregate Functions → work on multiple rows, return a single result like COUNT(), SUM(), AVG(), MAX(), MIN().
Scalar Functions → work on each row individually like, UPPER(), LOWER(), LENGTH(), ROUND(), NOW().

User-Defined Functions :
--------------------------
These are custom functions that you create to encapsulate logic and reuse it, They can take input parameters, process them, and return a value.

SYNTAX :
---------
CREATE FUNCTION getFullName(fname VARCHAR(50), lname VARCHAR(50))
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
   RETURN CONCAT(fname, ' ', lname);
END;

USAGE : 
SELECT getFullName('John', 'Doe');
-- Output: John Doe




